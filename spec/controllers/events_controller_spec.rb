require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe EventsController, type: :controller do
  let(:valid_attributes) { attributes_for(:event) }
  let(:invalid_attributes) { attributes_for(:event).except(:title) }
  let(:current_user) { create :user }
  let(:valid_session) do
    {
      user_id: current_user.id
    }
  end

  describe 'GET #index' do
    let!(:event) { create :event }

    it 'returns a success response' do
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #show' do
    let!(:event) { create :event }

    it 'returns a success response' do
      get :show, params: {id: event.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #edit' do
    let!(:event) { create :event }

    it 'returns a success response' do
      get :edit, params: {id: event.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Event' do
        expect {
          post :create, params: {event: valid_attributes}, session: valid_session
        }.to change(Event, :count).by(1)
      end

      it 'redirects to the events list' do
        post :create, params: {event: valid_attributes}, session: valid_session
        expect(response).to redirect_to(events_url)
      end
    end

    context 'with invalid params' do
      it 'returns a success response' do
        post :create, params: {event: invalid_attributes}, session: valid_session
        expect(response).to be_successful
      end

      it 'renders the new template' do
        post :create, params: {event: invalid_attributes}, session: valid_session
        expect(response).to render_template(:new)
      end
    end
  end

  describe 'PUT #update' do
    let!(:event) { create :event }

    context 'with valid params' do
      let(:new_attributes) {
        { title: 'Fresh title' }
      }

      it 'updates the requested event' do
        expect do
          put :update, params: {id: event.to_param, event: new_attributes}, session: valid_session
          event.reload
        end.to change(event, :title)
      end

      it 'redirects to the events list' do
        put :update, params: {id: event.to_param, event: new_attributes}, session: valid_session
        expect(response).to redirect_to(events_url)
      end
    end

    context 'with invalid params' do
      let(:new_attributes) {
        { title: '' }
      }

      it 'returns a success response' do
        put :update, params: {id: event.to_param, event: new_attributes}, session: valid_session
        expect(response).to be_successful
      end

      it 'renders the edit template' do
        put :update, params: {id: event.to_param, event: new_attributes}, session: valid_session
        expect(response).to render_template(:edit)
      end
    end
  end

  describe 'DELETE #destroy' do
    let!(:event) { create :event }

    it 'destroys the requested event' do
      expect {
        delete :destroy, params: {id: event.to_param}, session: valid_session
      }.to change(Event, :count).by(-1)
    end

    it 'redirects to the events list' do
      delete :destroy, params: {id: event.to_param}, session: valid_session
      expect(response).to redirect_to(events_url)
    end
  end
end
